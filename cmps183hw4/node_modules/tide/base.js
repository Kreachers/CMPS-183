'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function defer(fn) {
  setTimeout(fn, 1);
}

function getNextState(oldState, newState) {
  return newState;
}

function getMiddewareFn(middleware) {
  return middleware ? middleware.reduce(function (fn, middle) {
    return middle(fn);
  }, _get__('getNextState')) : _get__('getNextState');
}

var Tide = function () {
  function Tide() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$middleware = _ref.middleware,
        middleware = _ref$middleware === undefined ? [] : _ref$middleware;

    _classCallCheck(this, Tide);

    this.state = null;
    this.changeHandlers = [];
    this._componentProps = {};

    this.middleware = middleware;
    this.middlewareFn = _get__('getMiddewareFn')(this.middleware);
  }

  Tide.prototype.getState = function getState() {
    return this.state;
  };

  Tide.prototype.setState = function setState(state, options) {
    this.state = this.middlewareFn(this.state, state);
    this.emitChange(options);
  };

  Tide.prototype.updateState = function updateState(updater, options) {
    this.setState(updater(this.state), options);
  };

  Tide.prototype.mutate = function mutate(keyPath, value, options) {
    var kp = Array.isArray(keyPath) ? keyPath : keyPath.split('.');
    var val = typeof value === 'function' ? value(this.getState().getIn(kp)) : value;
    this.setState(this.getState().setIn(kp, val), options);
  };

  Tide.prototype.get = function get(keyPath) {
    var kp = Array.isArray(keyPath) ? keyPath : keyPath.split('.');
    return this.getState().getIn(kp);
  };

  Tide.prototype.addMiddleware = function addMiddleware(newMiddleware) {
    this.middleware = [].concat(this.middleware, [newMiddleware]);
    this.middlewareFn = _get__('getMiddewareFn')(this.middleware);
  };

  Tide.prototype.addProp = function addProp(name, prop) {
    if (process.env.NODE_ENV !== 'production' && this[name]) {
      throw new Error('Naming conflict, ' + name + ' is already defined');
    }
    this[name] = prop;
  };

  Tide.prototype.addComponentProp = function addComponentProp(name, obj) {
    if (process.env.NODE_ENV !== 'production' && this._componentProps[name]) {
      throw new Error('Naming conflict, ' + name + ' is already defined');
    }
    this._componentProps[name] = obj;
  };

  Tide.prototype.getComponentProps = function getComponentProps() {
    return this._componentProps;
  };

  Tide.prototype.onChange = function onChange(handler) {
    this.changeHandlers.push(handler);
  };

  Tide.prototype.offChange = function offChange(handler) {
    var _this = this;

    this.changeHandlers.forEach(function (fn, i) {
      if (handler === fn) {
        _this.changeHandlers.splice(i, 1);
        return false;
      }
    });
  };

  Tide.prototype.emit = function emit() {
    this.changeHandlers.forEach(function (fn) {
      fn && fn();
    });
  };

  Tide.prototype.emitChange = function emitChange() {
    var _this2 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (options.immediate) {
      this.emit();
    } else if (!this._willEmit) {
      this._willEmit = true;
      _get__('defer')(function () {
        _this2._willEmit = false;
        _this2.emit();
      });
    }
  };

  return Tide;
}();

exports.default = Tide;

var _RewiredData__ = Object.create(null);

var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
var _RewireAPI__ = {};

(function () {
  function addPropertyToAPIObject(name, value) {
    Object.defineProperty(_RewireAPI__, name, {
      value: value,
      enumerable: false,
      configurable: true
    });
  }

  addPropertyToAPIObject('__get__', _get__);
  addPropertyToAPIObject('__GetDependency__', _get__);
  addPropertyToAPIObject('__Rewire__', _set__);
  addPropertyToAPIObject('__set__', _set__);
  addPropertyToAPIObject('__reset__', _reset__);
  addPropertyToAPIObject('__ResetDependency__', _reset__);
  addPropertyToAPIObject('__with__', _with__);
})();

function _get__(variableName) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _get_original__(variableName);
  } else {
    var value = _RewiredData__[variableName];

    if (value === INTENTIONAL_UNDEFINED) {
      return undefined;
    } else {
      return value;
    }
  }
}

function _get_original__(variableName) {
  switch (variableName) {
    case 'getNextState':
      return getNextState;

    case 'getMiddewareFn':
      return getMiddewareFn;

    case 'defer':
      return defer;
  }

  return undefined;
}

function _assign__(variableName, value) {
  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
    return _set_original__(variableName, value);
  } else {
    return _RewiredData__[variableName] = value;
  }
}

function _set_original__(variableName, _value) {
  switch (variableName) {}

  return undefined;
}

function _update_operation__(operation, variableName, prefix) {
  var oldValue = _get__(variableName);

  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;

  _assign__(variableName, newValue);

  return prefix ? newValue : oldValue;
}

function _set__(variableName, value) {
  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
    Object.keys(variableName).forEach(function (name) {
      _RewiredData__[name] = variableName[name];
    });
  } else {
    if (value === undefined) {
      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
    } else {
      _RewiredData__[variableName] = value;
    }

    return function () {
      _reset__(variableName);
    };
  }
}

function _reset__(variableName) {
  delete _RewiredData__[variableName];
}

function _with__(object) {
  var rewiredVariableNames = Object.keys(object);
  var previousValues = {};

  function reset() {
    rewiredVariableNames.forEach(function (variableName) {
      _RewiredData__[variableName] = previousValues[variableName];
    });
  }

  return function (callback) {
    rewiredVariableNames.forEach(function (variableName) {
      previousValues[variableName] = _RewiredData__[variableName];
      _RewiredData__[variableName] = object[variableName];
    });
    var result = callback();

    if (!!result && typeof result.then == 'function') {
      result.then(reset).catch(reset);
    } else {
      reset();
    }

    return result;
  };
}

var _typeOfOriginalExport = typeof Tide === 'undefined' ? 'undefined' : _typeof(Tide);

function addNonEnumerableProperty(name, value) {
  Object.defineProperty(Tide, name, {
    value: value,
    enumerable: false,
    configurable: true
  });
}

if ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(Tide)) {
  addNonEnumerableProperty('__get__', _get__);
  addNonEnumerableProperty('__GetDependency__', _get__);
  addNonEnumerableProperty('__Rewire__', _set__);
  addNonEnumerableProperty('__set__', _set__);
  addNonEnumerableProperty('__reset__', _reset__);
  addNonEnumerableProperty('__ResetDependency__', _reset__);
  addNonEnumerableProperty('__with__', _with__);
  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);
}

exports.__get__ = _get__;
exports.__GetDependency__ = _get__;
exports.__Rewire__ = _set__;
exports.__set__ = _set__;
exports.__ResetDependency__ = _reset__;
exports.__RewireAPI__ = _RewireAPI__;